class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        if len(nums1) > len(nums2):
            nums1, nums2 = nums2, nums1

        totalLen = len(nums1) + len(nums2)
        halfLen = totalLen // 2
        leftPoint = 0
        rightPoint = len(nums1)

        while leftPoint <= rightPoint:
            partition1 = (leftPoint + rightPoint) // 2
            partition2 = halfLen - partition1

            maxLeft1 = float('-inf') if partition1 == 0 else nums1[partition1 - 1]
            minRight1 = float('inf') if partition1 == len(nums1) else nums1[partition1]
            maxLeft2 = float('-inf') if partition2 == 0 else nums2[partition2 - 1]
            minRight2 = float('inf') if partition2 == len(nums2) else nums2[partition2]

            if (maxLeft1 <= minRight2) and (maxLeft2 <= minRight1):
                if totalLen % 2 == 0:
                    return (max(maxLeft1, maxLeft2) + min(minRight1, minRight2)) / 2
                else:
                    return min(minRight1, minRight2)
            elif maxLeft1 > minRight2:
                rightPoint = partition1 - 1
            else:
                leftPoint = partition1 + 1
'''
This solution finds the median of two sorted arrays using a binary search approach.  
It always performs the search on the smaller array to keep things efficient.  
The idea is to partition both arrays such that everything on the left side is less than or equal to everything on the right side.  
It calculates the left and right values around each partition and checks if the condition for a valid partition is met.  
If it is, it returns the median based on whether the total length is odd or even.  
If not, it adjusts the binary search boundaries until it finds the correct partition.
'''
